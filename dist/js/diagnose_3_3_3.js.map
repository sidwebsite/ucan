{"version":3,"file":"js/diagnose_3_3_3.js","mappings":";;AAAA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;AACL,CAAC,E","sources":["webpack://ucan/./src/js/diagnose_3_3_3.js"],"sourcesContent":["// Modal\r\nlet testAlertModal = new bootstrap.Modal(document.getElementById('testAlert'), {\r\n    keyboard: false,\r\n    backdrop: 'static'\r\n});\r\nwindow.addEventListener('load', () => testAlertModal.show());\r\n// collapse\r\nconst collapseBtn = document.querySelectorAll('.collapse-btn');\r\nconst collapse = document.querySelectorAll('.test-collapse');\r\n\r\ncollapseBtn.forEach((btn, index) => {\r\n    btn.addEventListener('click', () => {\r\n        new bootstrap.Collapse(collapse[index]).toggle();\r\n        btn.classList.toggle('rotate-180');\r\n    })\r\n});\r\n// scrollTo function\r\nfunction scrollToTargetAdjusted(elments) {\r\n    const headerOffset = 100;\r\n    let elementPosition = elments.getBoundingClientRect().top;\r\n    let offsetPosition = window.pageYOffset === 0 ? elementPosition + window.pageYOffset - (headerOffset + 80) : elementPosition + window.pageYOffset - headerOffset;\r\n    window.scrollTo({\r\n        top: offsetPosition,\r\n        behavior: \"smooth\"\r\n    });   \r\n}\r\n// diagnosis test function\r\nconst diagnosisTest = document.querySelectorAll('.diagnosis-test');\r\nconst testAlert = document.querySelectorAll('.alert');\r\nconst testBtn = document.querySelector('#test-btn');\r\n\r\nconst switchFun = (bool, radios) => {\r\n    bool === 'true' ? radios.forEach(r => r.disabled = false) : radios.forEach(r => r.disabled = true);\r\n}\r\nconst testArr = [...diagnosisTest];\r\nfor (let i = 0; i < diagnosisTest.length; i++) {\r\n    const element = diagnosisTest[i];\r\n    const radios = element.querySelectorAll('.radio > input[type=\"radio\"]');\r\n    if(i === 0) {\r\n        radios.forEach(r => r.disabled = false)\r\n        element.classList.add('diagnosis-test-active');\r\n    } else {\r\n        radios.forEach(r => r.disabled = true)\r\n    };\r\n    // change\r\n    radios.forEach(radio => {\r\n        if(radio.checked === true) {\r\n            element.dataset.switch = 'true';\r\n            // element.classList.add('opacity-25');// 2024/10/18修改\r\n            switchFun(element.dataset.switch, radios);\r\n        } else {\r\n            radio.addEventListener('click', () => {\r\n                const testEnd = diagnosisTest.length - 1;\r\n                // block alert\r\n                !testAlert[i].classList.contains('visually-hidden') ? testAlert[i].classList.add('visually-hidden') : false;\r\n                // 開啟一下題效果\r\n                if(element.dataset.switch === 'false') {\r\n                    element.dataset.switch = 'true';\r\n                    // element.classList.add('opacity-25');// 2024/10/18修改\r\n                    element.classList.remove('diagnosis-test-active');\r\n                    scrollToTargetAdjusted(element);\r\n                    if(i !== testEnd) {\r\n                        const nextElement = diagnosisTest[i + 1];\r\n                        const nextElementRadios = nextElement.querySelectorAll('.radio > input[type=\"radio\"]');\r\n                        nextElement.classList.add('diagnosis-test-active');\r\n                        nextElementRadios.forEach(r => r.disabled = false);     \r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n// button function\r\ntestBtn.addEventListener('click', () => {\r\n    let testNmuber = [];\r\n    testArr.forEach((test, index) => {\r\n        if(test.dataset.switch === 'false') {\r\n            testAlert[index].classList.remove('visually-hidden');\r\n            testNmuber.push(index);\r\n            scrollToTargetAdjusted(testArr[testNmuber[0]]);\r\n        } else {\r\n            testAlert[index].classList.add('visually-hidden');\r\n        }\r\n    });\r\n});"],"names":[],"sourceRoot":""}